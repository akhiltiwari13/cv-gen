// package main
//
// import (
// 	"bytes"
// 	"fmt"
// 	"log"
// 	"os"
//
// 	"github.com/SebastiaanKlippert/go-wkhtmltopdf"
// 	"github.com/russross/blackfriday/v2"
// )
//
// func main() {
// 	resumeFile := "RESUME.md"
// 	data, err := os.ReadFile(resumeFile)
// 	if err != nil {
// 		log.Fatalf("Error reading %s: %v", resumeFile, err)
// 	}
//
// 	html := blackfriday.Run(data)
//
// 	htmlTemplate := `<!DOCTYPE html>
// <html>
// <head>
//   <meta charset="UTF-8">
//   <title>Resume</title>
//   <style>
//     body {
//       font-family: Arial, sans-serif;
//       font-size: 12px;
//       background-color: #FFF;
//       color: #000;
//       margin: 20px;
//     }
//     h1, h2, h3 {
//       color: #000;
//       margin-bottom: 0.5em;
//     }
//     p, ul, ol {
//       line-height: 1.4;
//       margin-bottom: 1em;
//     }
//   </style>
// </head>
// <body>
//   %s
// </body>
// </html>`
//
// 	finalHTML := fmt.Sprintf(htmlTemplate, string(html))
//
// 	pdfg, err := wkhtmltopdf.NewPDFGenerator()
// 	if err != nil {
// 		log.Fatalf("Failed to create PDF generator: %v", err)
// 	}
//
// 	page := wkhtmltopdf.NewPageReader(bytes.NewReader([]byte(finalHTML)))
// 	page.Encoding.Set("UTF-8")
// 	pdfg.Dpi.Set(96)
// 	pdfg.AddPage(page)
//
// 	if err := pdfg.Create(); err != nil {
// 		log.Fatalf("Error generating PDF: %v", err)
// 	}
//
// 	outFile := "resume.pdf"
// 	if err := pdfg.WriteFile(outFile); err != nil {
// 		log.Fatalf("Error writing PDF file: %v", err)
// 	}
//
// 	log.Printf("Successfully generated %s\n", outFile)
// }

// intial implementation
// package main
//
// import (
// 	"bytes"
// 	"flag"
// 	"fmt"
// 	"io"
// 	"log"
// 	"os"
// 	"path/filepath"
// 	"strings"
//
// 	"github.com/SebastiaanKlippert/go-wkhtmltopdf"
// 	"github.com/russross/blackfriday/v2"
// )
//
// // ThemeConfig holds styling configuration
// type ThemeConfig struct {
// 	Mode          string // "ats" or "custom"
// 	FontFamily    string
// 	CustomCSSPath string
// 	ColorScheme   string
// 	MarginSize    string
// }
//
// func main() {
// 	// Define command line flags
// 	resumeFile := flag.String("input", "RESUME.md", "Input markdown resume file")
// 	outputFile := flag.String("output", "resume.pdf", "Output PDF file")
// 	mode := flag.String("mode", "ats", "Mode: 'ats' for ATS-friendly or 'custom' for styled")
// 	fontFamily := flag.String("font", "Arial, sans-serif", "Font family to use")
// 	cssPath := flag.String("css", "", "Path to custom CSS file")
// 	colorScheme := flag.String("theme", "default", "Color scheme: default, dark, light, catppuccin-mocha, catppuccin-latte, etc.")
// 	margin := flag.String("margin", "20px", "Margin size")
//
// 	flag.Parse()
//
// 	// Configure theme
// 	config := ThemeConfig{
// 		Mode:          *mode,
// 		FontFamily:    *fontFamily,
// 		CustomCSSPath: *cssPath,
// 		ColorScheme:   *colorScheme,
// 		MarginSize:    *margin,
// 	}
//
// 	// Read markdown content
// 	data, err := os.ReadFile(*resumeFile)
// 	if err != nil {
// 		log.Fatalf("Error reading %s: %v", *resumeFile, err)
// 	}
//
// 	// Convert markdown to HTML
// 	html := blackfriday.Run(data)
//
// 	// Generate final HTML with styling
// 	finalHTML := generateHTML(html, config)
//
// 	// Convert to PDF
// 	if err := generatePDF(finalHTML, *outputFile); err != nil {
// 		log.Fatalf("Error generating PDF: %v", err)
// 	}
//
// 	log.Printf("Successfully generated %s\n", *outputFile)
// }
//
// // generateHTML applies the appropriate styling based on the ThemeConfig
// func generateHTML(htmlContent []byte, config ThemeConfig) string {
// 	// Base CSS for all modes
// 	baseCSS := fmt.Sprintf(`
// 		body {
// 			font-family: %s;
// 			font-size: 12px;
// 			margin: %s;
// 		}
// 		h1, h2, h3 {
// 			margin-bottom: 0.5em;
// 		}
// 		p, ul, ol {
// 			line-height: 1.4;
// 			margin-bottom: 1em;
// 		}
// 	`, config.FontFamily, config.MarginSize)
//
// 	// Additional styling based on mode
// 	var styleContent string
//
// 	if config.Mode == "ats" {
// 		// ATS-friendly mode - minimal styling
// 		styleContent = baseCSS + `
// 			body {
// 				background-color: #FFF;
// 				color: #000;
// 			}
// 			h1, h2, h3 {
// 				color: #000;
// 			}
// 		`
// 	} else {
// 		// Custom styling mode
// 		styleContent = baseCSS
//
// 		// Add color scheme CSS
// 		themeCSS := getColorSchemeCSS(config.ColorScheme)
// 		styleContent += themeCSS
//
// 		// Add custom CSS file if provided
// 		if config.CustomCSSPath != "" {
// 			customCSS, err := os.ReadFile(config.CustomCSSPath)
// 			if err != nil {
// 				log.Printf("Warning: Could not load custom CSS file: %v", err)
// 			} else {
// 				styleContent += string(customCSS)
// 			}
// 		}
// 	}
//
// 	// Construct HTML template
// 	htmlTemplate := fmt.Sprintf(`<!DOCTYPE html>
// <html>
// <head>
//   <meta charset="UTF-8">
//   <title>Resume</title>
//   <style>
//     %s
//   </style>
// </head>
// <body>
//   %s
// </body>
// </html>`, styleContent, string(htmlContent))
//
// 	return htmlTemplate
// }
//
// // getColorSchemeCSS returns CSS for predefined color schemes
// func getColorSchemeCSS(scheme string) string {
// 	switch strings.ToLower(scheme) {
// 	case "dark":
// 		return `
// 			body {
// 				background-color: #222;
// 				color: #eee;
// 			}
// 			h1, h2, h3 {
// 				color: #fff;
// 			}
// 			a {
// 				color: #6bf;
// 			}
// 			hr {
// 				border-color: #444;
// 			}
// 		`
// 	case "catppuccin-mocha":
// 		return `
// 			body {
// 				background-color: #1e1e2e;
// 				color: #cdd6f4;
// 			}
// 			h1 {
// 				color: #f5c2e7;
// 			}
// 			h2 {
// 				color: #cba6f7;
// 			}
// 			h3 {
// 				color: #89b4fa;
// 			}
// 			a {
// 				color: #89dceb;
// 			}
// 			hr {
// 				border-color: #313244;
// 			}
// 			strong {
// 				color: #f9e2af;
// 			}
// 		`
// 	case "catppuccin-latte":
// 		return `
// 			body {
// 				background-color: #eff1f5;
// 				color: #4c4f69;
// 			}
// 			h1 {
// 				color: #d20f39;
// 			}
// 			h2 {
// 				color: #8839ef;
// 			}
// 			h3 {
// 				color: #1e66f5;
// 			}
// 			a {
// 				color: #179299;
// 			}
// 			hr {
// 				border-color: #ccd0da;
// 			}
// 			strong {
// 				color: #df8e1d;
// 			}
// 		`
// 	default: // "light" or default
// 		return `
// 			body {
// 				background-color: #fff;
// 				color: #333;
// 			}
// 			h1, h2, h3 {
// 				color: #111;
// 			}
// 			a {
// 				color: #0077cc;
// 			}
// 			hr {
// 				border-color: #ddd;
// 			}
// 		`
// 	}
// }
//
// // generatePDF converts HTML to PDF using wkhtmltopdf
// func generatePDF(htmlContent string, outputPath string) error {
// 	pdfg, err := wkhtmltopdf.NewPDFGenerator()
// 	if err != nil {
// 		return fmt.Errorf("failed to create PDF generator: %v", err)
// 	}
//
// 	page := wkhtmltopdf.NewPageReader(bytes.NewReader([]byte(htmlContent)))
// 	page.Encoding.Set("UTF-8")
// 	pdfg.Dpi.Set(96)
//
// 	// Enable additional options for custom styling
// 	if filepath.Ext(outputPath) == ".pdf" {
// 		pdfg.NoCollate.Set(false)
// 		pdfg.PageSize.Set("A4")
// 		pdfg.MarginBottom.Set(10)
// 		pdfg.MarginTop.Set(10)
// 		pdfg.MarginLeft.Set(10)
// 		pdfg.MarginRight.Set(10)
// 		pdfg.Grayscale.Set(false)
// 	}
//
// 	pdfg.AddPage(page)
//
// 	if err := pdfg.Create(); err != nil {
// 		return fmt.Errorf("error generating PDF: %v", err)
// 	}
//
// 	if err := pdfg.WriteFile(outputPath); err != nil {
// 		return fmt.Errorf("error writing PDF file: %v", err)
// 	}
//
// 	return nil
// }
//
// // Helper function to load an entire file
// func loadFile(path string) (string, error) {
// 	file, err := os.Open(path)
// 	if err != nil {
// 		return "", err
// 	}
// 	defer file.Close()
//
// 	content, err := io.ReadAll(file)
// 	if err != nil {
// 		return "", err
// 	}
//
// 	return string(content), nil
// }

